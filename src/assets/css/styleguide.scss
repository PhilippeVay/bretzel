/*
 * Styleguide
 * Layout & mixins
 * by Alsacréations - 2016-2017
 */

 // Config things (mêmes imports que pour styles.scss ; contrainte : aucun des 3 ne doit générer de règle CSS => seulement définir des mixins et variables)
 //
 // Mixins
 @import "_config/_mixins";
 // Breakpoints
 @import "_config/_breakpoints";
 // Same variables than for project
 @import "_config/_variables";


// Variables list for Styleguide (if used)
$colors: (
  brand-primary      : $brand-primary,
  brand-secondary    : $brand-secondary,
  color-base: $color-base,
  color-link: $color-link,
  background-base: $background-base,
  gray-light   : $gray-light,
  gray-lightest: $gray-lightest,
  gray-a11y    : $gray-a11y,
  color1: $color1,
  color2: $color2,
  color3: $color3,
  color4: $color4,
  color5: $color5,
  color6: $color6,
  color-error: $color-error,
  color-success: $color-success,
);

/*
 * Sass Mixins
 */
// mixin that displays font-size value
@mixin fontsize($fontsize) {
  &::after {
    content: "#{$fontsize}";
    @extend .sg-code-inline;
    margin-left: $small-value;
    font-weight: normal;
    vertical-align: middle;
  }
}

// mixin that displays hexadecimal code of a color
@mixin hexa($sassvar, $sasscolor) {
  &::before {
    background: #{$sasscolor};
  }
  &::after {
    content: "$#{$sassvar}";
  }
}

// Mixin that displays font-family
@mixin font($font) {
  &::before {
    content: "#{$font}";
    font-weight: bold;
  }
}


/*
 * Layout
 */

/* body */
.sg {
  position: relative;
  padding: 0;
  // font-family: Segoe UI, Frutiger, Dejavu Sans, Helvetica Neue, Arial, sans-serif;
  font-family: $font-stack-common;
  background-color: $background-base;
}

h1,
h2,
h3 {
  font-weight: normal;
}

h1 {
  margin-top: 0;
  margin-bottom: 0;
}


/* Header */
.sg-header {
  position: relative;
  padding: $medium-value;
  margin-bottom: $small-value;
  text-align: center;
  background: #F8F8F8;
  h1 {
    font-size: 4.5rem;
    color: $brand-primary;
  }
  h2 {
    margin-top: 0;
    color: $gray-a11y;
    font-size: 2rem;
  }

  .icon-kiwi-leaf {
    display: inline-block;
    width: 1em;
    height: 1em;
    fill: currentColor;
  }
  .icon-pepins {
    position: absolute;
    top: 2rem;
    right: 2rem;
  }
}


/* Sidebar/Menu */
.sg-menu {
  position: absolute;
    top: 19rem; left: 2rem;
  display: none;
  width: 22rem;
  padding: $medium-value;
  background: #F8F8F8;

  &.is-fixed {
    position: fixed;
      top: 2rem;
  }
}
@media (min-width: 768px) {
  .sg-menu {
    display: block;
  }
}


/* Menu with Tocify */
.tocify-header {
  margin: 0;
  padding: 0;
  list-style-type: none;

  ul {
    margin: 0 0 $small-value;
    padding-left: $medium-value;
    list-style-type: none;
    font-size: 90%;
  }
}
.tocify-item {
  margin: 0;
  padding: $tiny-value 0;

  a {
    padding-bottom: .25rem;
    text-decoration: none;
    border-bottom: 0 solid;

    &:focus, &:hover {
      border-bottom-width: 1px;
    }
  }
}
.tocify-focus {
  a {
    font-weight: bold;
    color: $brand-primary;
  }
}
.tocify-subheader {
  display: none;
}
.tocify-extend-page {
  display: none !important;
}


/*
 * Typography
 */
/* main title */
.sg-title {
  margin-top: $small-value;
  font-size: $h1-size;
}
/* copyright */
.sg-copyright {
  text-align: center;
  font-size: 1.2rem;
  color: #666;
}
/* section title */
.sg-section {
  & > h2.sg {
    padding-bottom: .15em;
    font-size: $h1-size;
    color: #333;
    border-bottom: 2px solid #eee;
  }
  &:first-child > h2.sg {
    margin-top: 0;
  }
}
.sg-text h3.sg {
  color: #333;
  border-left: 4px solid $brand-primary;
  padding-left: 10px;
}
/* text */
.sg-text {
  p {
    line-height: 2;
  }
}


/*
 * Styleguide Content
 */
.sg-content {
  position: relative;
  padding: $small-plus-value;

  @media (min-width: 768px) {
    margin-left: 24rem;
    padding: $medium-value $large-value;
  }

  @media (min-width: 1580px) {
    max-width: 1080px;
    margin: auto;
    padding: $medium-value;
  }
}

/* section */
.sg-section {
  margin-bottom: $extra-large-value;
}

/* example & canvas */
.sg-example {
  margin-top: $small-value;
  margin-bottom: $medium-value;
  border: 1px solid #dddddd;
  border-radius: 3px;
}
.sg-canvas {
  position: relative;
  padding: $large-value 3rem;
  overflow-x: auto;
}


/*
 * Code
 */
/* inline: <code> */
code,
code.sg,
.sg-code-inline {
  display: inline-block;
  padding: .2rem .5rem;
  font-family: $font-stack-monospace;
  font-size: 1.4rem;
  white-space: nowrap;
  border: solid 1px #eaeaea;
  border-radius: 2px;
  background-color: #f8f8f8;
}

/* block: <pre> */
.sg-code {
  padding: $medium-value;
  margin-top: 0;
  font-family: $font-stack-monospace;
  font-size: 1.4rem;
  line-height: 1.6;
  border-top: solid 1px #eaeaea;
  background-color: #f8f8f8;
}
/* markup color */
.sg-code .hljs-tag,
.sg-code .hljs-title {
  color: #2f6f9f;
}
.sg-code .hljs-attribute {
  color: #4f9fcf;
}
.sg-code .hljs-string,
.sg-code .hljs-number,
.sg-code .hljs-value {
  color: #d44950;
}
.sg-code .hljs-comment {
  color: #999988;
}
/* toggle button */
.sg-code-toggle {
  position: absolute;
    right: 0; bottom: 0;
  width: 100px;
  padding: $tiny-value;
  text-align: center;
  font-size: 1.3rem;
  color: #777;
  background-color: #FFF;
  border: 1px solid #DDD;
  border-width: 1px 0 0 1px;
  border-top-left-radius: 3px;

  &:focus, &:hover {
    background-color: #f8f8f8;
  }
}


/*
 * Colors section
 */
// pour cacher le bouton "show markup"
.sg-section-couleurs {
  .sg-code-toggle {
    display: none;
  }
}

.sg-color {
  & + & {
    margin-top: $large-value;
  }
}

.sg-color-item {
  display: inline-block;
  vertical-align: top;
  width: 150px;
  border: solid 1px #eaeaea;

  & {
    margin: $small-value;
  }

  // color example
  &::before {
    content: '';
    display: block;
    height: 80px;
  }

  // hexadecimal code
  &::after {
    display: block;
    @extend .sg-code-inline;
  }

  // Colors
  $i: 1;
  @each $var, $col in $colors {
    &:nth-of-type(#{$i}) {
      $i : $i + 1;
      @include hexa($var, $col);
    }
  }

}

/*
 * Icons
 */
/*
.sg-icon {
  display: flex;
  flex-wrap: wrap;

  & > [class*="icon-"] {
    width: calc(100% / 2);
    margin: 0 0 $large-value;
    text-align: center;

    @include respond-to("small-up") {
      width: calc(100% / 5);
    }

    code {
      font-size: 1.2rem;
    }

    &:before {
      display: block;
      margin-bottom: $small-value;
      font-size: 4rem;
      text-align: center;
    }
  }
}
*/


/*
 * Fonts section
 */
[class*="sg-font-"] {
  & + & {
    margin-top: $medium-value;
  }
}
// hides "show markup" button
.sg-section-fonts {
  .sg-code-toggle {
    display: none;
  }
}
.sg-font-common {
  font-family: $font-stack-common;
  @include font($font-stack-common);
}
.sg-font-headings {
  font-family: $font-stack-headings;
  @include font($font-stack-headings);
}
.sg-font-monospace {
  font-family: $font-stack-monospace;
  @include font($font-stack-monospace);
}


/*
 * Headings section
 */
$eltHeadings: (h1, h2, h3, h4, h5, h6);
.sg-section-titres {
  @each $h in $eltHeadings {
    #{$h}:not(.sg) { @include fontsize(#{$h}-size); }
  }
}


/*
 * Grids section
 */
.sg-grid {
  & + & {
    margin-top: $medium-value;
  }

  & > * {
    padding: $medium-value;
    background: #f8f8f8;
  }
}


/*
 * Block alignment section
 */
.sg-align-block {
  padding: $medium-value;
  background: #f8f8f8;

  & + & {
    margin-top: $medium-value;
  }
}
.sg-align-float {
  padding: $medium-value;
  background: #f8f8f8;

  // @extend .clearfix; @NOTE Ne fonctionne pas si on compile styleguide.scss à part et donc sans importer KNACSS. On l'écrit en dur plutôt que de le @extend
  // Clearfix
  &::after {
    content: "";
    display: table;
    clear: both;
    border-collapse: collapse;
  }

  & + & {
    margin-top: $medium-value;
  }

  & > div[class*="f"] {
    padding: $small-value;
    background: #ddd;
  }
}
